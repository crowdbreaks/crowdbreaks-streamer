# Base docker compose
version: '3'
services:
  web:
    build: ./web
    container_name: web
    depends_on:
      - redis
      - stream
    env_file:
      - secrets.list
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - './web/logs/:/home/app/logs/'
      - './web/app/config/:/home/app/app/config/'
      - './web/app/tmp/:/home/app/app/tmp/'
  redis:
    container_name: redis
    image: "redis:alpine"
    volumes:
      - './redis/:/data'
  celery:
    build: ./web
    container_name: celery
    command: su -m celery-user -c "celery -A app.worker.celery_init worker --loglevel=info --concurrency=20"
    depends_on:
      - redis
    env_file:
      - secrets.list
    volumes:
      - './web/logs/:/home/app/logs/'
      - './web/app/config/:/home/app/app/config/'
      - './web/app/tmp/:/home/app/app/tmp/'
  celery-beat:
    build: ./web
    container_name: celery-beat
    # leave --pidfile empty so that celery doesn't create one
    command: celery -A app.worker.celery_init beat --loglevel=info --pidfile=
    depends_on:
      - celery
    env_file:
      - secrets.list
    volumes:
      - './web/logs/:/home/app/logs/'
      - './web/app/config/:/home/app/app/config/'
      - './web/app/tmp/:/home/app/app/tmp/'
  stream:
    build: ./web
    container_name: stream
    command: python3 run_stream.py
    restart: on-failure
    depends_on:
      - redis
    volumes:
      - './web/logs/:/home/app/logs/'
      - './web/app/config/:/home/app/app/config/'
      - './web/app/tmp/:/home/app/app/tmp/'
    env_file:
      - secrets.list
