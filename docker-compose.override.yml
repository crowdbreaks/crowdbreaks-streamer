# Development config
# -----
# Notes:
# - Everything in here overwrites docker-compose.yml and is only used when using `docker-compose up`
# - Do not use nginx proxy: Directly expose port 8000
# - Mount entire source code under ./web for live-reloading of code (this unfortunately doesn't work for celery, would need a third-party tool, use `docker-compose restart celery`)
# - For debugging to work 'stdin_open' and 'tty' have to be set. Afterwards one can run `docker attach web` to get access to the pdb debugger
# - Adding elasticsearch container (in production using AWS ES service) and exposing it under localhost:9200
version: '3'
services:
  web:
    ports:
      - "8000:8000"
    volumes:
      - './web/:/home/app'
    stdin_open: true
    tty: true
  celery:
    volumes:
      - './web/:/home/app'
    depends_on:
      - elasticsearch
  celery-beat:
    volumes:
      - './web/:/home/app'
    depends_on:
      - elasticsearch
  stream:
    volumes:
      - './web/:/home/app'
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.6
    container_name: elasticsearch
    environment:
      - cluster.name=cb-dev
      - "ES_JAVA_OPTS=-Xms400m -Xmx400m"
    ports:
      - 9200:9200
    depends_on:
      - web
  kibana:
    image: docker.elastic.co/kibana/kibana:6.8.6
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      - LOGGING_QUIET=true
    volumes:
      - './kibana/config:/usr/share/kibana/config'
    depends_on:
      - elasticsearch
  flower:
    ports:
      - 5555:5555
